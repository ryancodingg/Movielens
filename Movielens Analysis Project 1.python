{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "03bfe56f",
   "metadata": {},
   "source": [
    "### Analysis of MovieLens Data\n",
    "\n",
    "We are provided with the MovieLens data collected by the GroupLens Research Project at the University of Minnesota.\n",
    "In particular, the data was collected through the MovieLens web site (movielens.umn.edu), which records a number of users' ratings (1-5) towards their watched movies. Besides, simple demographic info (e.g., age and gender) for the users and descriptive info (e.g., title and genre) for the movies are provided. \n",
    "\n",
    "Originally, there are several separate files to record the user-movie rating info, user demographic info and movie descriptive info that I have conducted preliminary processing to map and merge the data into one csv file named 'movielens_data.csv'. The header of the csv file is shown below. \n",
    "\n",
    "| userId | age | gender | occupation| movieId | rating | genre | timestamp |\n",
    "    | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | \n",
    "    \n",
    "#### Description of Fields\n",
    "\n",
    "* __userId__ - the user's id\n",
    "* __age__ - the user's age\n",
    "* __gender__ - the user's gender\n",
    "* __occupation__ - the user's occupation\n",
    "* __movieId__ - the movie's id\n",
    "* __rating__ - the user's rating towards the movie\n",
    "* __genre__ - the genre of the movie\n",
    "* __timestamp__ - the timestamp indicating when the user rated the movie\n",
    "\n",
    "Note that, a same user (i.e., a same userId) corresponds to a same age/gender/occupation; a same movie (i.e., a same movieId) corresponds to a same genre; a same user (i.e., a same userId) may rate multiple movies and a same movie (i.e., a same movieId) may receive ratings from multiple users.\n",
    "\n",
    "\n",
    "This project is completed in Session 1/ 2022 at my Univeristy, where we are asked to do anysis for MovieLens Data by Python. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55934c71",
   "metadata": {},
   "source": [
    " ### Data Cleaning and Exploration\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3222d750",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "78e0fb3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "origin_df = pd.read_csv('movielens_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8ac97518",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100000 entries, 0 to 99999\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count   Dtype  \n",
      "---  ------      --------------   -----  \n",
      " 0   userId      100000 non-null  int64  \n",
      " 1   age         99984 non-null   float64\n",
      " 2   gender      99983 non-null   object \n",
      " 3   occupation  100000 non-null  object \n",
      " 4   movieId     100000 non-null  int64  \n",
      " 5   rating      99984 non-null   float64\n",
      " 6   genre       100000 non-null  object \n",
      " 7   timestamp   100000 non-null  int64  \n",
      "dtypes: float64(2), int64(3), object(3)\n",
      "memory usage: 6.1+ MB\n"
     ]
    }
   ],
   "source": [
    "origin_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5aae310c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>occupation</th>\n",
       "      <th>movieId</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>196</td>\n",
       "      <td>49.0</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>242</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>186</td>\n",
       "      <td>39.0</td>\n",
       "      <td>F</td>\n",
       "      <td>executive</td>\n",
       "      <td>302</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Crime</td>\n",
       "      <td>891717742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22</td>\n",
       "      <td>25.0</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>377</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Children</td>\n",
       "      <td>878887116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>244</td>\n",
       "      <td>28.0</td>\n",
       "      <td>M</td>\n",
       "      <td>technician</td>\n",
       "      <td>51</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Romance</td>\n",
       "      <td>880606923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>166</td>\n",
       "      <td>47.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>educator</td>\n",
       "      <td>346</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>886397596</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId   age gender  occupation  movieId  rating     genre  timestamp\n",
       "0     196  49.0      M      writer      242     3.0    Comedy  881250949\n",
       "1     186  39.0      F   executive      302     NaN     Crime  891717742\n",
       "2      22  25.0      M      writer      377     1.0  Children  878887116\n",
       "3     244  28.0      M  technician       51     2.0   Romance  880606923\n",
       "4     166  47.0    NaN    educator      346     1.0     Drama  886397596"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "origin_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b59a6a37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the length before removing missing data is  100000\n"
     ]
    }
   ],
   "source": [
    "print('the length before removing missing data is ', len(origin_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03c70c08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the length after removing missing data is  99022\n"
     ]
    }
   ],
   "source": [
    "clean_df = origin_df.drop(origin_df.index[(origin_df['occupation'] == 'none')]).dropna()\n",
    "print('the length after removing missing data is ', len(clean_df))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "063e08bf",
   "metadata": {},
   "source": [
    "## Descriptive statistics\n",
    "\n",
    "With the cleaned data in Q1, I will provide the data summarization \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "93818d47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the number of unique users is  934\n",
      "the number of unique occupation is  20\n",
      "the number of unique movies is  1682\n",
      "the number of unique genres is  19\n"
     ]
    }
   ],
   "source": [
    "# Calculate the total number of unique users, unique occupations, unique movies, and unique genres\n",
    "user_array = clean_df['userId'].unique()\n",
    "print('the number of unique users is ', user_array.size)\n",
    "\n",
    "occupation_array = clean_df['occupation'].unique()\n",
    "print('the number of unique occupation is ',occupation_array.size)\n",
    "\n",
    "movie_array = clean_df['movieId'].unique()\n",
    "print('the number of unique movies is ', movie_array.size)\n",
    "\n",
    "genre_array = clean_df['genre'].unique()\n",
    "print('the number of unique genres is ', genre_array.size)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7e2b5d85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    99022.000000\n",
       "mean         3.527792\n",
       "std          1.125743\n",
       "min          1.000000\n",
       "25%          3.000000\n",
       "50%          4.000000\n",
       "75%          4.000000\n",
       "max          5.000000\n",
       "Name: rating, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_df['rating'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5633c406",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId  count\n",
       "0       1    272\n",
       "1       2     62\n",
       "2       3     54\n",
       "3       4     24\n",
       "4       5    170"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# group users by their ids and then count the number of movies rated by each user\n",
    "rated_movie_num = clean_df.groupby(['userId'])['movieId'].count().reset_index(name='count')\n",
    "rated_movie_num.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "447a51e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    934.000000\n",
       "mean     106.019272\n",
       "std      100.793963\n",
       "min       19.000000\n",
       "25%       33.000000\n",
       "50%       65.000000\n",
       "75%      148.000000\n",
       "max      736.000000\n",
       "Name: count, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rated_movie_num['count'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "39ac5978",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movieId</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   movieId  count\n",
       "0        1    445\n",
       "1        2    129\n",
       "2        3     88\n",
       "3        4    206\n",
       "4        5     84"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# group movies by their ids and then count the number of users rated the movie\n",
    "rated_user_num = clean_df.groupby(['movieId'])['userId'].count().reset_index(name='count')\n",
    "rated_user_num.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c8dda7f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1682.000000\n",
       "mean       58.871581\n",
       "std        79.629796\n",
       "min         1.000000\n",
       "25%         6.000000\n",
       "50%        26.000000\n",
       "75%        79.000000\n",
       "max       578.000000\n",
       "Name: count, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rated_user_num['count'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06efb1f6",
   "metadata": {},
   "source": [
    "## Plotting and Analysis\n",
    "\n",
    "In this part, I will try to explore the correlation between gender/occupation/genre and ratings; for instance, do female/male users tend to provide higher ratings than male/female users? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "288264a4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1, 2]), [Text(1, 0, 'F'), Text(2, 0, 'M')])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# gender-rating correlation\n",
    "clean_df.boxplot(\"rating\", by=\"gender\")\n",
    "plt.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4586879",
   "metadata": {},
   "source": [
    "### Analysis and Observation\n",
    "\n",
    "_Below only shows several possible observations as examples. You may have more different ones._ \n",
    "\n",
    "- The rating distribution regarding female and male users are quite similar\n",
    "- The gender info does not affect the ratings too much \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "316a7d81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n",
       "        18, 19, 20]),\n",
       " [Text(1, 0, 'administrator'),\n",
       "  Text(2, 0, 'artist'),\n",
       "  Text(3, 0, 'doctor'),\n",
       "  Text(4, 0, 'educator'),\n",
       "  Text(5, 0, 'engineer'),\n",
       "  Text(6, 0, 'entertainment'),\n",
       "  Text(7, 0, 'executive'),\n",
       "  Text(8, 0, 'healthcare'),\n",
       "  Text(9, 0, 'homemaker'),\n",
       "  Text(10, 0, 'lawyer'),\n",
       "  Text(11, 0, 'librarian'),\n",
       "  Text(12, 0, 'marketing'),\n",
       "  Text(13, 0, 'other'),\n",
       "  Text(14, 0, 'programmer'),\n",
       "  Text(15, 0, 'retired'),\n",
       "  Text(16, 0, 'salesman'),\n",
       "  Text(17, 0, 'scientist'),\n",
       "  Text(18, 0, 'student'),\n",
       "  Text(19, 0, 'technician'),\n",
       "  Text(20, 0, 'writer')])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# occupation-rating correlation\n",
    "clean_df.boxplot(\"rating\", by=\"occupation\")\n",
    "plt.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a71c884",
   "metadata": {},
   "source": [
    "### Analysis and Observation\n",
    "\n",
    "_Below only shows several possible observations as examples. You may have more different ones._ \n",
    "\n",
    "- Overall, the rating distribution regarding majority occupations are quite similar\n",
    "- Users who are artists or lawyers tend to provide higher ratings than thoes with other occupations\n",
    "- Users with occuptations, i.e., exectuive and healthcare are more likely provide lower ratings\n",
    "- Users with occputations, i.e., artist, lawyer, executive and healthcare possess larger variance w.r.t. ratings, and their min ratings are 1, which is different from users with other occupations (smaller variance and min ratings are 2) \n",
    "- The impact of occupation on ratings is also quite limited, though larger than gender."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ddc8631c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n",
       "        18, 19]),\n",
       " [Text(1, 0, 'Action'),\n",
       "  Text(2, 0, 'Adventure'),\n",
       "  Text(3, 0, 'Animation'),\n",
       "  Text(4, 0, 'Children'),\n",
       "  Text(5, 0, 'Comedy'),\n",
       "  Text(6, 0, 'Crime'),\n",
       "  Text(7, 0, 'Documentary'),\n",
       "  Text(8, 0, 'Drama'),\n",
       "  Text(9, 0, 'Fantasy'),\n",
       "  Text(10, 0, 'Film-Noir'),\n",
       "  Text(11, 0, 'Horror'),\n",
       "  Text(12, 0, 'Musical'),\n",
       "  Text(13, 0, 'Mystery'),\n",
       "  Text(14, 0, 'Romance'),\n",
       "  Text(15, 0, 'Sci-Fi'),\n",
       "  Text(16, 0, 'Thriller'),\n",
       "  Text(17, 0, 'War'),\n",
       "  Text(18, 0, 'Western'),\n",
       "  Text(19, 0, 'unknown')])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# genre-rating correlation\n",
    "clean_df.boxplot(\"rating\", by=\"genre\")\n",
    "plt.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33b80dc3",
   "metadata": {},
   "source": [
    "### Analysis and Observation\n",
    "\n",
    "\n",
    "- Overall, the rating distribution regarding majority genre are quite similar\n",
    "- Movies with gernes Crime, Documentary, Film-Noir and War tend to receive higher ratings than thoes with other genres\n",
    "- Movies with gernes Crime, Documentary, Film-Noir and War possess larger variance w.r.t. ratings, and their min ratings are 1, which is different from movies with other genres (smaller variance and min ratings are 2) \n",
    "- The impact of genre is similar as that of occupation on ratings, which is also quite limited. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12dcecdf",
   "metadata": {},
   "source": [
    "### Summary of the Data\n",
    "\n",
    "_Below only shows possible data summary as examples. You may have more different ones._\n",
    "\n",
    "- The dataset contains 934 unique users' rating towards 1682 unique movies, where the ratings range from 1 to 5 scaled by 1; and the mean rating is around 3.5; and more than 50% of records have ratings no less than 4;\n",
    "- Users in the dataset come from 20 different occupations; and each user have rated 106 movies averagely;\n",
    "- Movies in the dataset belong to 19 different genres; and each movie have received 58 ratings averagely;\n",
    "- The features, i.e., gender, occupation and genre are less correlated with ratings; where gender holds the worst case; this indicates it is not easy to infer rating with these features.\n",
    "- The dataset contains a small number of missing values, around 1000 records;\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d8d121f",
   "metadata": {},
   "source": [
    "#### Q4. Detect and remove outliers\n",
    "\n",
    "We may define outlier users and movies with three rules:\n",
    "\n",
    "* users whose age is no more than 10\n",
    "* users who rate less than 20 movies\n",
    "* movies that receives less than 10 ratings (i.e., movies are rated by less than 10 users)\n",
    " \n",
    "Please remove the corresponding records in the csv file that involves outlier users and movies. After that, print the length of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "892f5ba8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the length of data after removing outlier age  98948\n"
     ]
    }
   ],
   "source": [
    "# drop users whose age is no more than 10\n",
    "remove_outlier_df = clean_df.drop(clean_df.index[(clean_df['age'] <= 10)])\n",
    "print('the length of data after removing outlier age ', len(remove_outlier_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "63ad4ec1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the number of user after removing outlier age 932\n"
     ]
    }
   ],
   "source": [
    "# group users by their ids and count the number of their ratings \n",
    "group_user_df = remove_outlier_df.groupby(['userId'])['rating'].count().reset_index(name= 'count')\n",
    "print('the number of user after removing outlier age', len(group_user_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6d2984df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId  count\n",
       "0       1    272\n",
       "1       2     62\n",
       "2       3     54\n",
       "3       4     24\n",
       "4       5    170"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "group_user_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f7aad734",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "931\n"
     ]
    }
   ],
   "source": [
    "# get the ids of users who have rated no less than 20 movies\n",
    "userIds = group_user_df[group_user_df['count'] >= 20]['userId'].tolist()\n",
    "print(len(userIds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1b8088f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter users who have rated less than 20 movies\n",
    "remove_outlier_df = remove_outlier_df[remove_outlier_df['userId'].isin(userIds)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fcfdfa0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the length of data is 98929\n"
     ]
    }
   ],
   "source": [
    "print('the length of data is', len(remove_outlier_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cffac7d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movieId</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   movieId  count\n",
       "0        1    444\n",
       "1        2    128\n",
       "2        3     88\n",
       "3        4    206\n",
       "4        5     84"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# group movies by their ids and count the number of their ratings \n",
    "group_movie_df = remove_outlier_df.groupby(['movieId'])['rating'].count().reset_index(name= 'count')\n",
    "group_movie_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8c2624f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1147\n"
     ]
    }
   ],
   "source": [
    "# get the ids of movies that have received no less than 10 ratings\n",
    "movieIds = group_movie_df[group_movie_df['count'] >= 10]['movieId'].tolist()\n",
    "print(len(movieIds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "129a4fca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "96854"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter movies that have received less than 10 ratings\n",
    "remove_outlier_df = remove_outlier_df[remove_outlier_df['movieId'].isin(movieIds)]\n",
    "len(remove_outlier_df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
