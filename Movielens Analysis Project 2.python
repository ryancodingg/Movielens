{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b154a46c",
   "metadata": {},
   "source": [
    "The goal of the second Portfolio task is to train linear regression models to predict users' ratings towards movies. This involves a standard Data Science workflow: exploring data, building models, making predictions, and evaluating results. In this task, I will explore the impacts of feature selections and different sizes of training/testing data on the model performance. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2566945d",
   "metadata": {},
   "source": [
    "## Import Cleaned MovieLens Dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "77e7deaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pylab as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a656b42",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "512b3c63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96854\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('movielens_data_clean.csv')\n",
    "print(len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b722522d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>occupation</th>\n",
       "      <th>movieId</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>196</td>\n",
       "      <td>49.0</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>242</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>25.0</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>377</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Children</td>\n",
       "      <td>878887116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>244</td>\n",
       "      <td>28.0</td>\n",
       "      <td>M</td>\n",
       "      <td>technician</td>\n",
       "      <td>51</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Romance</td>\n",
       "      <td>880606923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>298</td>\n",
       "      <td>44.0</td>\n",
       "      <td>M</td>\n",
       "      <td>executive</td>\n",
       "      <td>474</td>\n",
       "      <td>4.0</td>\n",
       "      <td>War</td>\n",
       "      <td>884182806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>253</td>\n",
       "      <td>26.0</td>\n",
       "      <td>F</td>\n",
       "      <td>librarian</td>\n",
       "      <td>465</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>891628467</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId   age gender  occupation  movieId  rating      genre  timestamp\n",
       "0     196  49.0      M      writer      242     3.0     Comedy  881250949\n",
       "1      22  25.0      M      writer      377     1.0   Children  878887116\n",
       "2     244  28.0      M  technician       51     2.0    Romance  880606923\n",
       "3     298  44.0      M   executive      474     4.0        War  884182806\n",
       "4     253  26.0      F   librarian      465     5.0  Adventure  891628467"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "913af3a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 96854 entries, 0 to 96853\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   userId      96854 non-null  int64  \n",
      " 1   age         96854 non-null  float64\n",
      " 2   gender      96854 non-null  object \n",
      " 3   occupation  96854 non-null  object \n",
      " 4   movieId     96854 non-null  int64  \n",
      " 5   rating      96854 non-null  float64\n",
      " 6   genre       96854 non-null  object \n",
      " 7   timestamp   96854 non-null  int64  \n",
      "dtypes: float64(2), int64(3), object(3)\n",
      "memory usage: 5.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5da9444d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>genre</th>\n",
       "      <th>genre_code</th>\n",
       "      <th>occupation</th>\n",
       "      <th>occupation_code</th>\n",
       "      <th>gender</th>\n",
       "      <th>gender_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Comedy</td>\n",
       "      <td>4</td>\n",
       "      <td>writer</td>\n",
       "      <td>19</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Children</td>\n",
       "      <td>3</td>\n",
       "      <td>writer</td>\n",
       "      <td>19</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Romance</td>\n",
       "      <td>13</td>\n",
       "      <td>technician</td>\n",
       "      <td>18</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>War</td>\n",
       "      <td>16</td>\n",
       "      <td>executive</td>\n",
       "      <td>6</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adventure</td>\n",
       "      <td>1</td>\n",
       "      <td>librarian</td>\n",
       "      <td>10</td>\n",
       "      <td>F</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Romance</td>\n",
       "      <td>13</td>\n",
       "      <td>programmer</td>\n",
       "      <td>13</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Drama</td>\n",
       "      <td>7</td>\n",
       "      <td>executive</td>\n",
       "      <td>6</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Sci-Fi</td>\n",
       "      <td>14</td>\n",
       "      <td>administrator</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Comedy</td>\n",
       "      <td>4</td>\n",
       "      <td>student</td>\n",
       "      <td>17</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Sci-Fi</td>\n",
       "      <td>14</td>\n",
       "      <td>programmer</td>\n",
       "      <td>13</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Comedy</td>\n",
       "      <td>4</td>\n",
       "      <td>engineer</td>\n",
       "      <td>4</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        genre  genre_code     occupation  occupation_code gender  gender_code\n",
       "0      Comedy           4         writer               19      M            1\n",
       "1    Children           3         writer               19      M            1\n",
       "2     Romance          13     technician               18      M            1\n",
       "3         War          16      executive                6      M            1\n",
       "4   Adventure           1      librarian               10      F            0\n",
       "5     Romance          13     programmer               13      M            1\n",
       "6       Drama           7      executive                6      M            1\n",
       "7      Sci-Fi          14  administrator                0      F            0\n",
       "8      Comedy           4        student               17      M            1\n",
       "9      Sci-Fi          14     programmer               13      M            1\n",
       "10     Comedy           4       engineer                4      M            1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "# convert categorical values into numerial values, e.g., genre -> genre_code\n",
    "ord_enc = OrdinalEncoder(dtype=int)\n",
    "df[[\"genre_code\", \"gender_code\", \"occupation_code\"]] = ord_enc.fit_transform(df[[\"genre\", \"gender\", \"occupation\"]])\n",
    "df[[\"genre\", \"genre_code\", \"occupation\", \"occupation_code\", \"gender\", \"gender_code\"]].head(11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c3f746f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>occupation</th>\n",
       "      <th>movieId</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>genre_code</th>\n",
       "      <th>gender_code</th>\n",
       "      <th>occupation_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>196</td>\n",
       "      <td>49.0</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>242</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>881250949</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>25.0</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>377</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Children</td>\n",
       "      <td>878887116</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>244</td>\n",
       "      <td>28.0</td>\n",
       "      <td>M</td>\n",
       "      <td>technician</td>\n",
       "      <td>51</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Romance</td>\n",
       "      <td>880606923</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>298</td>\n",
       "      <td>44.0</td>\n",
       "      <td>M</td>\n",
       "      <td>executive</td>\n",
       "      <td>474</td>\n",
       "      <td>4.0</td>\n",
       "      <td>War</td>\n",
       "      <td>884182806</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>253</td>\n",
       "      <td>26.0</td>\n",
       "      <td>F</td>\n",
       "      <td>librarian</td>\n",
       "      <td>465</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>891628467</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId   age gender  occupation  movieId  rating      genre  timestamp  \\\n",
       "0     196  49.0      M      writer      242     3.0     Comedy  881250949   \n",
       "1      22  25.0      M      writer      377     1.0   Children  878887116   \n",
       "2     244  28.0      M  technician       51     2.0    Romance  880606923   \n",
       "3     298  44.0      M   executive      474     4.0        War  884182806   \n",
       "4     253  26.0      F   librarian      465     5.0  Adventure  891628467   \n",
       "\n",
       "   genre_code  gender_code  occupation_code  \n",
       "0           4            1               19  \n",
       "1           3            1               19  \n",
       "2          13            1               18  \n",
       "3          16            1                6  \n",
       "4           1            0               10  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8d1e89d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "corr_age:  0.051723646652454894\n",
      "corr_genre:  0.045249889516191646\n",
      "corr_gender:  -0.007238616702177161\n",
      "corr_occupation:  -0.03371705886621186\n"
     ]
    }
   ],
   "source": [
    "# get the correlations between age/genre/gender/occupation and rating\n",
    "corr_age = df['age'].corr(df['rating']) \n",
    "corr_genre = df['genre_code'].corr(df['rating'])\n",
    "corr_gender = df['gender_code'].corr(df['rating'])\n",
    "corr_occupation = df['occupation_code'].corr(df['rating'])\n",
    "\n",
    "print('corr_age: ', corr_age)\n",
    "print('corr_genre: ', corr_genre)\n",
    "print('corr_gender: ', corr_gender)\n",
    "print('corr_occupation: ', corr_occupation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f12171d",
   "metadata": {},
   "source": [
    "From the results, we may get several observations/conclusions:\n",
    "* rating is relatively more correlated with age and movie genre.\n",
    "* raing is relatively less corrlelated with user gender and occupation. \n",
    "* overall, rating is not highly correlated with the four features, as the correlation values are quite small. Therefore, using these features as input for rating prediction may not be quite accurate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fcfcbd4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96854\n"
     ]
    }
   ],
   "source": [
    "df_another = pd.read_csv('movielens_data_clean.csv')\n",
    "print(len(df_another))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e6cec6f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert gender to numerical values\n",
    "df_another['gender'] = df_another['gender'].astype('category')\n",
    "df_another['gender'] = df_another['gender'].cat.codes\n",
    "\n",
    "#convert occuptaion to numerical values\n",
    "df_another['occupation'] = df_another['occupation'].astype('category')\n",
    "df_another['occupation'] = df_another['occupation'].cat.codes\n",
    "\n",
    "#convert genre to numerical values\n",
    "df_another['genre'] = df_another['genre'].astype('category')\n",
    "df_another['genre'] = df_another['genre'].cat.codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e69c4c23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>occupation</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.037126</td>\n",
       "      <td>-0.370879</td>\n",
       "      <td>0.027286</td>\n",
       "      <td>0.051724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>0.037126</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.012117</td>\n",
       "      <td>-0.000509</td>\n",
       "      <td>-0.007239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation</th>\n",
       "      <td>-0.370879</td>\n",
       "      <td>0.012117</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.011443</td>\n",
       "      <td>-0.033717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genre</th>\n",
       "      <td>0.027286</td>\n",
       "      <td>-0.000509</td>\n",
       "      <td>-0.011443</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.045250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rating</th>\n",
       "      <td>0.051724</td>\n",
       "      <td>-0.007239</td>\n",
       "      <td>-0.033717</td>\n",
       "      <td>0.045250</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 age    gender  occupation     genre    rating\n",
       "age         1.000000  0.037126   -0.370879  0.027286  0.051724\n",
       "gender      0.037126  1.000000    0.012117 -0.000509 -0.007239\n",
       "occupation -0.370879  0.012117    1.000000 -0.011443 -0.033717\n",
       "genre       0.027286 -0.000509   -0.011443  1.000000  0.045250\n",
       "rating      0.051724 -0.007239   -0.033717  0.045250  1.000000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculate the correlation between features\n",
    "df_another[['age', 'gender', 'occupation', 'genre', 'rating']].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7606c849",
   "metadata": {},
   "source": [
    "### Split Training and Testing Data\n",
    "\n",
    "* To further investigate whether the size of the training/testing data affects the model performance, please random split the data into training and testing sets with different sizes:\n",
    "    * Case 1: training data containing 10% of the entire data;\n",
    "    * Case 2: training data containing 90% of the entire data. \n",
    "* Print the shape of training and testing sets in the two cases. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f8eeeec6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case 1 train shape:  (9685, 11)\n",
      "Case 1 test shape:  (87169, 11)\n",
      "Case 2 train shape:  (87168, 11)\n",
      "Case 2 test shape:  (9686, 11)\n"
     ]
    }
   ],
   "source": [
    "# Case 1 - split train and test sets\n",
    "train_case1, test_case1 = train_test_split(df, test_size=0.9, random_state=142)\n",
    "print('Case 1 train shape: ', train_case1.shape)\n",
    "print('Case 1 test shape: ', test_case1.shape)\n",
    "\n",
    "# Case 2 - split train and test sets\n",
    "train_case2, test_case2 = train_test_split(df, test_size=0.1, random_state=142)\n",
    "print('Case 2 train shape: ', train_case2.shape)\n",
    "print('Case 2 test shape: ', test_case2.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14600224",
   "metadata": {},
   "source": [
    "### Train Linear Regression Models with Feature Selection under Cases 1 & 2\n",
    "* When training a machine learning model for prediction, we may need to select the most important/correlated input features for more accurate results. \n",
    "* To investigate whether feature selection affects the model performance, please select two most correlated features and two least correlated features regarding rating, respectively. \n",
    "* Train four linear regression models by following the conditions:\n",
    "    - (model-a) using the training/testing data in case 1 with two most correlated input features\n",
    "    - (model-b) using the training/testing data in case 1 with two least correlated input features\n",
    "    - (model-c) using the training/testing data in case 2 with two most correlated input features\n",
    "    - (model-d) using the training/testing data in case 2 with two least correlated input features\n",
    "* By doing this, we can verify the impacts of the size of traing/testing data on the model performance via comparing model-a and model-c (or model-b and model-d); meanwhile the impacts of feature selection can be validated via comparing model-a and model-b (or model-c and model-d).    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bee417e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Case 1 - train the model with the most correlated features\n",
    "reg_M1 = linear_model.LinearRegression()\n",
    "X_train_M1 = train_case1[['age', 'genre_code']]\n",
    "y_train_M1 = train_case1['rating']\n",
    "\n",
    "X_test_M1 = test_case1[['age', 'genre_code']]\n",
    "y_test_M1 = test_case1['rating']\n",
    "\n",
    "reg_M1.fit(X_train_M1, y_train_M1)\n",
    "\n",
    "# Case 1 - train the model with the least correlated features\n",
    "reg_L1 = linear_model.LinearRegression()\n",
    "X_train_L1 = train_case1[['gender_code', 'occupation_code']]\n",
    "y_train_L1 = train_case1['rating']\n",
    "\n",
    "X_test_L1 = test_case1[['gender_code', 'occupation_code']]\n",
    "y_test_L1 = test_case1['rating']\n",
    "\n",
    "reg_L1.fit(X_train_L1, y_train_L1)\n",
    "\n",
    "# Case 2 - train the model with the most correlated features\n",
    "reg_M2 = linear_model.LinearRegression()\n",
    "X_train_M2 = train_case2[['age', 'genre_code']]\n",
    "y_train_M2 = train_case2['rating']\n",
    "\n",
    "X_test_M2 = test_case2[['age', 'genre_code']]\n",
    "y_test_M2 = test_case2['rating']\n",
    "\n",
    "reg_M2.fit(X_train_M2, y_train_M2)\n",
    "\n",
    "# Case 2 - train the model with the least correlated features\n",
    "reg_L2 = linear_model.LinearRegression()\n",
    "X_train_L2 = train_case2[['gender_code', 'occupation_code']]\n",
    "y_train_L2 = train_case2['rating']\n",
    "\n",
    "X_test_L2 = test_case2[['gender_code', 'occupation_code']]\n",
    "y_test_L2 = test_case2['rating']\n",
    "\n",
    "reg_L2.fit(X_train_L2, y_train_L2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f85c7279",
   "metadata": {},
   "source": [
    "### Evaluate Models\n",
    "* Evaluate the performance of the four models with two metrics, including MSE and Root MSE\n",
    "* Print the results of the four models regarding the two metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ecc88e5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==== Case 1 - the results for the model with most correlated features\n",
      "reg_M1 MSE: 1.241348960988581\n",
      "reg_M1 Root MSE: 1.1141584092886347\n",
      "==== Case 1 - the results for the model with least correlated features\n",
      "reg_L1 MSE: 1.2456735046160612\n",
      "reg_L1 Root MSE: 1.116097444050501\n",
      "==== Case 2 - the results for the model with most correlated features\n",
      "reg_M2 MSE: 1.2331306469017946\n",
      "reg_M2 Root MSE: 1.110464158314799\n",
      "==== Case 2 - the results for the model with least correlated features\n",
      "reg_L2 MSE: 1.2357380214091607\n",
      "reg_L2 Root MSE: 1.1116375404821306\n"
     ]
    }
   ],
   "source": [
    "# Evaluate reg_M1\n",
    "predicted_M1 = reg_M1.predict(X_test_M1)\n",
    "mse_M1 = ((np.array(y_test_M1)-predicted_M1)**2).sum()/len(y_test_M1)\n",
    "rmse_M1 = np.sqrt(mse_M1)\n",
    "print(\"==== Case 1 - the results for the model with most correlated features\")\n",
    "print(\"reg_M1 MSE:\", mse_M1)\n",
    "print(\"reg_M1 Root MSE:\", rmse_M1)\n",
    "\n",
    "# Evaluate reg_L1\n",
    "predicted_L1 = reg_L1.predict(X_test_L1)\n",
    "mse_L1 = ((np.array(y_test_L1)-predicted_L1)**2).sum()/len(y_test_L1)\n",
    "rmse_L1 = np.sqrt(mse_L1)\n",
    "print(\"==== Case 1 - the results for the model with least correlated features\")\n",
    "print(\"reg_L1 MSE:\", mse_L1)\n",
    "print(\"reg_L1 Root MSE:\", rmse_L1)\n",
    "\n",
    "# Evaluate reg_M2\n",
    "predicted_M2 = reg_M2.predict(X_test_M2)\n",
    "mse_M2 = ((np.array(y_test_M2)-predicted_M2)**2).sum()/len(y_test_M2)\n",
    "rmse_M2 = np.sqrt(mse_M2)\n",
    "print(\"==== Case 2 - the results for the model with most correlated features\")\n",
    "print(\"reg_M2 MSE:\", mse_M2)\n",
    "print(\"reg_M2 Root MSE:\", rmse_M2)\n",
    "\n",
    "# Evaluate reg_L2\n",
    "predicted_L2 = reg_L2.predict(X_test_L2)\n",
    "mse_L2 = ((np.array(y_test_L2)-predicted_L2)**2).sum()/len(y_test_L2)\n",
    "rmse_L2 = np.sqrt(mse_L2)\n",
    "print(\"==== Case 2 - the results for the model with least correlated features\")\n",
    "print(\"reg_L2 MSE:\", mse_L2)\n",
    "print(\"reg_L2 Root MSE:\", rmse_L2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c614fb5",
   "metadata": {},
   "source": [
    "### Visualize, Compare and Analyze the Results\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b9988b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 4 artists>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create dataframe for the mse values and rmse values\n",
    "mse_df = pd.DataFrame({'mse': [mse_M1, mse_L1, mse_M2, mse_L2]}, index=['reg_M1', 'reg_L1', 'reg_M2','reg_L2'])\n",
    "rmse_df = pd.DataFrame({'rmse': [rmse_M1, rmse_L1, rmse_M2, rmse_L2]}, index=['reg_M1', 'reg_L1', 'reg_M2','reg_L2'])\n",
    "\n",
    "# plot figures to show the mse and rmse results of different cases\n",
    "sns.set(style=\"whitegrid\")\n",
    "plt.figure(figsize=(16,4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.ylim(1.2,1.25)\n",
    "plt.xlabel('Different models', size=15)\n",
    "plt.ylabel('MSE', size=15)\n",
    "plt.title(\"Comparison on MSE\", size=15)\n",
    "plt.bar(data=mse_df, height='mse', x=['reg_M1', 'reg_L1', 'reg_M2','reg_L2'], color='c')\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.ylim(1.10,1.12)\n",
    "plt.xlabel('Different models', size=15)\n",
    "plt.ylabel('RMSE', size=15)\n",
    "plt.title(\"Comparison on RMSE\", size=15)\n",
    "plt.bar(data=rmse_df, height='rmse', x=['reg_M1', 'reg_L1', 'reg_M2','reg_L2'], color='m')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91565fda",
   "metadata": {},
   "source": [
    "The following observations and conclusions can be made:\n",
    "* reg_M1 > reg_M2 and reg_L1 > reg_L2 indicates that more training data leads to better prediction\n",
    "* reg_M1 < reg_L1 and reg_M2 < reg_L2 indicates that more correlated input features help generate better results\n",
    "* The minor variation on the performance with different settings indicates that the models are not well trained with these input features. In other words, these input features cannot well help predict ratings.    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d1bbf41",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
