{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0619c315",
   "metadata": {},
   "source": [
    "In this task I will continue working with the movielens data collected by the GroupLens Research Project at the University of Minnesota. The columns in the dataset are a little bit different from the ones provided in the previous Portfolio tasks, where the 'rating' column is replaced by the 'feedback' column. There are two values regarding the 'feedback' with 1 indicating the user likes the corresponding movie; otherwise 0. \n",
    "\n",
    "The header of the csv file is shown below. \n",
    "\n",
    "| userId | age | gender | occupation| movieId | feedback | genre | timestamp |\n",
    "    | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | \n",
    "    \n",
    "#### Description of Fields\n",
    "\n",
    "* __userId__ - the user's id\n",
    "* __age__ - the user's age\n",
    "* __gender__ - the user's gender\n",
    "* __occupation__ - the user's occupation\n",
    "* __movieId__ - the movie's id\n",
    "* __feedback__ - the user's feedback towards the movie (1 means 'like'; 0 means 'dislike')\n",
    "* __genre__ - the genre of the movie\n",
    "* __timestamp__ - the timestamp indicating when the user rated the movie\n",
    "\n",
    "Note that, a same user (i.e., a same userId) corresponds to a same age/gender/occupation; a same movie (i.e., a same movieId) corresponds to a same genre; a same user (i.e., a same userId) may like multiple movies and a same movie (i.e., a same movieId) may be preferred by multiple users.\n",
    "\n",
    "\n",
    "My high level goal in this notebook is to try to build and evaluate predictive models for feedback from available features - predict the value of the __feedback__ field in the data from some of the other fields. Explore the data, build a model using a selection of features and then do some work on finding out which features provide the most accurate results.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "47be0d08",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "84c57251",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>occupation</th>\n",
       "      <th>movieId</th>\n",
       "      <th>feedback</th>\n",
       "      <th>genre</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>196</td>\n",
       "      <td>49</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>242</td>\n",
       "      <td>0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>186</td>\n",
       "      <td>39</td>\n",
       "      <td>F</td>\n",
       "      <td>executive</td>\n",
       "      <td>302</td>\n",
       "      <td>0</td>\n",
       "      <td>Crime</td>\n",
       "      <td>891717742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22</td>\n",
       "      <td>25</td>\n",
       "      <td>M</td>\n",
       "      <td>writer</td>\n",
       "      <td>377</td>\n",
       "      <td>0</td>\n",
       "      <td>Children</td>\n",
       "      <td>878887116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>244</td>\n",
       "      <td>28</td>\n",
       "      <td>M</td>\n",
       "      <td>technician</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>Romance</td>\n",
       "      <td>880606923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>166</td>\n",
       "      <td>47</td>\n",
       "      <td>M</td>\n",
       "      <td>educator</td>\n",
       "      <td>346</td>\n",
       "      <td>0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>886397596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>298</td>\n",
       "      <td>44</td>\n",
       "      <td>M</td>\n",
       "      <td>executive</td>\n",
       "      <td>474</td>\n",
       "      <td>1</td>\n",
       "      <td>War</td>\n",
       "      <td>884182806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>115</td>\n",
       "      <td>31</td>\n",
       "      <td>M</td>\n",
       "      <td>engineer</td>\n",
       "      <td>265</td>\n",
       "      <td>0</td>\n",
       "      <td>Action</td>\n",
       "      <td>881171488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>253</td>\n",
       "      <td>26</td>\n",
       "      <td>F</td>\n",
       "      <td>librarian</td>\n",
       "      <td>465</td>\n",
       "      <td>1</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>891628467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>305</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>programmer</td>\n",
       "      <td>451</td>\n",
       "      <td>0</td>\n",
       "      <td>Romance</td>\n",
       "      <td>886324817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>6</td>\n",
       "      <td>42</td>\n",
       "      <td>M</td>\n",
       "      <td>executive</td>\n",
       "      <td>86</td>\n",
       "      <td>0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>883603013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId  age gender  occupation  movieId  feedback      genre  timestamp\n",
       "0     196   49      M      writer      242         0     Comedy  881250949\n",
       "1     186   39      F   executive      302         0      Crime  891717742\n",
       "2      22   25      M      writer      377         0   Children  878887116\n",
       "3     244   28      M  technician       51         0    Romance  880606923\n",
       "4     166   47      M    educator      346         0      Drama  886397596\n",
       "5     298   44      M   executive      474         1        War  884182806\n",
       "6     115   31      M    engineer      265         0     Action  881171488\n",
       "7     253   26      F   librarian      465         1  Adventure  891628467\n",
       "8     305   23      M  programmer      451         0    Romance  886324817\n",
       "9       6   42      M   executive       86         0      Drama  883603013"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('movielens_data_feedback.csv')\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "95416744",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100000 entries, 0 to 99999\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count   Dtype \n",
      "---  ------      --------------   ----- \n",
      " 0   userId      100000 non-null  int64 \n",
      " 1   age         100000 non-null  int64 \n",
      " 2   gender      100000 non-null  object\n",
      " 3   occupation  100000 non-null  object\n",
      " 4   movieId     100000 non-null  int64 \n",
      " 5   feedback    100000 non-null  int64 \n",
      " 6   genre       100000 non-null  object\n",
      " 7   timestamp   100000 non-null  int64 \n",
      "dtypes: int64(5), object(3)\n",
      "memory usage: 6.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "73589258",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>occupation</th>\n",
       "      <th>movieId</th>\n",
       "      <th>feedback</th>\n",
       "      <th>genre</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>196</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>242</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>186</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>302</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>891717742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>377</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>878887116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>244</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>880606923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>166</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>346</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>886397596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>298</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>474</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>884182806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>115</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>265</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>881171488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>253</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>465</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>891628467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>305</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>451</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>886324817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>6</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>86</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>883603013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId  age  gender  occupation  movieId  feedback  genre  timestamp\n",
       "0     196   49       1          20      242         0      4  881250949\n",
       "1     186   39       0           6      302         0      5  891717742\n",
       "2      22   25       1          20      377         0      3  878887116\n",
       "3     244   28       1          19       51         0     13  880606923\n",
       "4     166   47       1           3      346         0      7  886397596\n",
       "5     298   44       1           6      474         1     16  884182806\n",
       "6     115   31       1           4      265         0      0  881171488\n",
       "7     253   26       0          10      465         1      1  891628467\n",
       "8     305   23       1          14      451         0     13  886324817\n",
       "9       6   42       1           6       86         0      7  883603013"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "# Convert categorical values into numerical values\n",
    "ord_enc = OrdinalEncoder(dtype=int)\n",
    "df[[\"genre\", \"gender\", \"occupation\"]] = ord_enc.fit_transform(df[[\"genre\", \"gender\", \"occupation\"]])\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e4da8e27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='feedback', ylabel='count'>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of positive and negative feedback\n",
    "sns.countplot(df['feedback'], label=\"Count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10359424",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>occupation</th>\n",
       "      <th>movieId</th>\n",
       "      <th>feedback</th>\n",
       "      <th>genre</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>userId</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.073599</td>\n",
       "      <td>-0.027605</td>\n",
       "      <td>0.103684</td>\n",
       "      <td>0.010377</td>\n",
       "      <td>-0.016846</td>\n",
       "      <td>0.000484</td>\n",
       "      <td>0.019082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>-0.073599</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.033358</td>\n",
       "      <td>-0.369476</td>\n",
       "      <td>-0.012612</td>\n",
       "      <td>0.039317</td>\n",
       "      <td>0.027601</td>\n",
       "      <td>0.156674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>-0.027605</td>\n",
       "      <td>0.033358</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.017354</td>\n",
       "      <td>-0.034575</td>\n",
       "      <td>-0.001126</td>\n",
       "      <td>-0.001079</td>\n",
       "      <td>-0.035490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation</th>\n",
       "      <td>0.103684</td>\n",
       "      <td>-0.369476</td>\n",
       "      <td>0.017354</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.003069</td>\n",
       "      <td>-0.022800</td>\n",
       "      <td>-0.011759</td>\n",
       "      <td>0.021844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movieId</th>\n",
       "      <td>0.010377</td>\n",
       "      <td>-0.012612</td>\n",
       "      <td>-0.034575</td>\n",
       "      <td>0.003069</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.162630</td>\n",
       "      <td>-0.043567</td>\n",
       "      <td>0.041867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feedback</th>\n",
       "      <td>-0.016846</td>\n",
       "      <td>0.039317</td>\n",
       "      <td>-0.001126</td>\n",
       "      <td>-0.022800</td>\n",
       "      <td>-0.162630</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.041401</td>\n",
       "      <td>-0.015546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genre</th>\n",
       "      <td>0.000484</td>\n",
       "      <td>0.027601</td>\n",
       "      <td>-0.001079</td>\n",
       "      <td>-0.011759</td>\n",
       "      <td>-0.043567</td>\n",
       "      <td>0.041401</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.008869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <td>0.019082</td>\n",
       "      <td>0.156674</td>\n",
       "      <td>-0.035490</td>\n",
       "      <td>0.021844</td>\n",
       "      <td>0.041867</td>\n",
       "      <td>-0.015546</td>\n",
       "      <td>0.008869</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              userId       age    gender  occupation   movieId  feedback  \\\n",
       "userId      1.000000 -0.073599 -0.027605    0.103684  0.010377 -0.016846   \n",
       "age        -0.073599  1.000000  0.033358   -0.369476 -0.012612  0.039317   \n",
       "gender     -0.027605  0.033358  1.000000    0.017354 -0.034575 -0.001126   \n",
       "occupation  0.103684 -0.369476  0.017354    1.000000  0.003069 -0.022800   \n",
       "movieId     0.010377 -0.012612 -0.034575    0.003069  1.000000 -0.162630   \n",
       "feedback   -0.016846  0.039317 -0.001126   -0.022800 -0.162630  1.000000   \n",
       "genre       0.000484  0.027601 -0.001079   -0.011759 -0.043567  0.041401   \n",
       "timestamp   0.019082  0.156674 -0.035490    0.021844  0.041867 -0.015546   \n",
       "\n",
       "               genre  timestamp  \n",
       "userId      0.000484   0.019082  \n",
       "age         0.027601   0.156674  \n",
       "gender     -0.001079  -0.035490  \n",
       "occupation -0.011759   0.021844  \n",
       "movieId    -0.043567   0.041867  \n",
       "feedback    0.041401  -0.015546  \n",
       "genre       1.000000   0.008869  \n",
       "timestamp   0.008869   1.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f363f9f6",
   "metadata": {},
   "source": [
    "#### Try to train a model with all features\n",
    "\n",
    "- Based on the correlation matrix, it seems that feedback has weak correlation with all the rest features\n",
    "- First try to train a model with all features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4a5f4070",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape:  (80000, 7)\n",
      "y_train shape:  (80000,)\n",
      "X_test shape:  (20000, 7)\n",
      "y_test.shape:  (20000,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(df.drop(['feedback'], axis=1), df['feedback'], stratify=df['feedback'], test_size=.2, random_state=7)\n",
    "\n",
    "# Checking shapes of each\n",
    "print(\"X_train shape: \", X_train.shape)\n",
    "print(\"y_train shape: \", y_train.shape)\n",
    "print(\"X_test shape: \", X_test.shape)\n",
    "print(\"y_test.shape: \", y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eacaf9b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['userId', 'age', 'gender', 'occupation', 'movieId', 'genre',\n",
       "       'timestamp'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "df002114",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acc on test set:  0.55375\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Train model with all features\n",
    "lr = LogisticRegression().fit(X_train, y_train)\n",
    "\n",
    "# Evaluate trained model on the test set\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Make predictions on the test set\n",
    "y_pred_test = lr.predict(X_test)\n",
    "\n",
    "# Calculate accuracy score on test set\n",
    "# You can also use the confusion matrix\n",
    "lr_accuracy = accuracy_score(y_test, y_pred_test)\n",
    "print(\"Acc on test set: \", lr_accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27617cbe",
   "metadata": {},
   "source": [
    "#### Try to tune the model for further improvements\n",
    "\n",
    "- The model performance is poor by using all features, i.e., 55%, which is quite close to random guessing\n",
    "- Try to tune the model by using RFE to select most important features\n",
    "- Try to train a model with the selected important features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8565667a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of features:  3\n",
      "Selected features:  [ True False False False  True False  True]\n",
      "Features ranking:  [1 2 5 4 1 3 1]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "rfe = RFE(lr, 3)\n",
    "rfe_model = rfe.fit(X_train, y_train)\n",
    "print(\"No. of features: \", rfe_model.n_features_)\n",
    "print(\"Selected features: \", rfe_model.support_)\n",
    "print(\"Features ranking: \", rfe_model.ranking_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "184e0b83",
   "metadata": {},
   "source": [
    "#### Try to train a model with most important features\n",
    "\n",
    "- The results from the RFE show that userId, movieId and timestamp is the most important features\n",
    "- Try to re-trian the model with three most important features \n",
    "- You may also try to tune the model by changing the value of C\n",
    "- You may also visualize the RFE results if you have the accuracy values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "89365c94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape:  (80000, 3)\n",
      "y_train shape:  (80000,)\n",
      "X_test shape:  (20000, 3)\n",
      "y_test.shape:  (20000,)\n",
      "Acc on test set:  0.55375\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# split training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(df.drop(['feedback', 'age', 'gender', 'genre', 'occupation'], axis=1), df['feedback'], stratify=df['feedback'], test_size=.2, random_state=7)\n",
    "\n",
    "# Check shapes of each set\n",
    "print(\"X_train shape: \", X_train.shape)\n",
    "print(\"y_train shape: \", y_train.shape)\n",
    "print(\"X_test shape: \", X_test.shape)\n",
    "print(\"y_test.shape: \", y_test.shape)\n",
    "\n",
    "# Train model with the top-3 features\n",
    "lr = LogisticRegression().fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test set\n",
    "y_pred_test = lr.predict(X_test)\n",
    "\n",
    "# Calculate accuracy score on test set\n",
    "lr_accuracy_tuned = accuracy_score(y_test, y_pred_test)\n",
    "print(\"Acc on test set: \", lr_accuracy_tuned)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9497859",
   "metadata": {},
   "source": [
    "#### Train a more advanced model\n",
    "\n",
    "- Based on the above results, the accuracy achieved by the simple logistic regression is poor\n",
    "- Even with RFE, the performance of LR model does not improve\n",
    "- Try to train a more advanced KNN model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2f519892",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import make_classification\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "171e7485",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(df.drop(['feedback'], axis=1), df['feedback'], stratify=df['feedback'], test_size=.2, random_state=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d36b5cbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing accuracy is:  0.6586\n"
     ]
    }
   ],
   "source": [
    "# Create and train a KNN classifier model\n",
    "clf = KNeighborsClassifier(n_neighbors = 10)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "# Use the model to predict testing data\n",
    "y_pred = clf.predict(X_test)\n",
    "knn_accuracy = accuracy_score(y_pred, y_test)\n",
    "print('Testing accuracy is: ', knn_accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c269013",
   "metadata": {},
   "source": [
    "#### Automatic model hyperparameter (algorithm parameter) tuning\n",
    "\n",
    "- The accuracy achieved by KNN is around 65%, which far exceeds that achieved by simple logistic regression, which demonstrate the superiority of the more advanced method on the classification problem\n",
    "- Try to tune the model to see whether we can get more accurate results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b7bf9395",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best K value:  9\n",
      "The accuracy:  0.66005\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Define search space for parameters\n",
    "parameter_grid = {'n_neighbors': range(5, 20)}\n",
    "\n",
    "X = df.drop(['feedback'], axis=1)\n",
    "y = df['feedback']\n",
    "\n",
    "# Create the knn model and use grid search to find out the best k value\n",
    "knn_clf = KNeighborsClassifier()\n",
    "clf = GridSearchCV(knn_clf, parameter_grid, scoring='accuracy', cv=5)\n",
    "clf.fit(X, y)\n",
    "\n",
    "# Identify the best k value and accuracy\n",
    "best_k = clf.best_params_['n_neighbors']\n",
    "knn_accuracy_tuned = clf.best_score_\n",
    "print('Best K value: ', best_k)\n",
    "print('The accuracy: ', knn_accuracy_tuned)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f183a13f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 2 artists>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dataframe for the accuracy values\n",
    "accuracy_df = pd.DataFrame({'accuracy': [lr_accuracy_tuned, knn_accuracy_tuned]}, index=['LR', 'KNN'])\n",
    "\n",
    "# Visualize the accuracy of different models \n",
    "# LR - Feature selection is applied \n",
    "# KNN - Grid search is applied \n",
    "sns.set(style=\"whitegrid\")\n",
    "plt.figure(figsize=(6,4))\n",
    "plt.ylim(0.5,0.7)\n",
    "plt.xlabel('Different models', size=15)\n",
    "plt.ylabel('Accuracy', size=15)\n",
    "plt.title(\"Comparison on Accuracy\", size=15)\n",
    "plt.bar(data=accuracy_df, height='accuracy', x=['LR', 'KNN'], color='c')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24d0c281",
   "metadata": {},
   "source": [
    "#### Final Comparison\n",
    "- By using feature selection, the performance of LR model does not improve, indicating the features may not be very helpful with the simple LR to predict the feedback\n",
    "- By using grid search, the performance of KNN model improves slightly (0.6586 vs 0.6601), implying the importance of tuning parameters for better machine learning models\n",
    "- The advanced KNN model outperforms the simple LR model, which demonstrates the superiority of the advanced machine learning models.\n",
    "- Although KNN defeats LR model, the improvements are also limited. This indicates we may need more advanced machine learning models, e.g., neural networks, to gain further improvements"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
